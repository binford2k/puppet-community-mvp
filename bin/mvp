#! /usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'yaml'
require 'fileutils'
require 'logger'
require 'mvp'

NAME     = File.basename($PROGRAM_NAME)
options  = {:config => File.expand_path('~/.mvp/config.yaml')}
optparse = OptionParser.new { |opts|
  opts.banner = "Usage : #{NAME} [command] [target] [options]

This tool will scrape the Puppet Forge API for interesting module & author stats.
It can also mirror public BigQuery tables or views into our dataset for efficiency,
or download and itemize each Forge module.

  * mirror [target]
      * Runs the download & then upload tasks.
      * Optional targets: all, authors, modules, releases, validations, itemizations, tables
  * get | retrieve | download [target]
      * Downloads and caches data locally so you can run the stats task.
      * Optional targets: all, authors, modules, releases
  * stats
      * Print out a summary of interesting stats.
"

  opts.on("-f FORGEAPI", "--forgeapi FORGEAPI", "Forge API server. Rarely needed.") do |arg|
    options[:forgeapi] = arg
  end

  opts.on("-c config", "--config CONFIG", "Location of config.yaml.") do |arg|
    options[:config] = File.expand_path(arg)
  end

  opts.on("-C CACHEDIR", "--cachedir CACHEDIR", "Where data should be cached.") do |arg|
    options[:cachedir] = arg
  end

  opts.on("-g GITHUB_DATA", "--github_data GITHUB_DATA", "The path to a csv file containing GitHub repos & stars.") do |arg|
    options[:github_data] = arg
  end

  opts.on("--project PROJECT", "The gcloud project to use.") do |arg|
    options[:gcloud][:project] = arg
  end

  opts.on("--dataset DATASET", "The gcloud dataset to use.") do |arg|
    options[:gcloud][:dataset] = arg
  end

  opts.on("--keyfile KEYFILE", "The gcloud keyfile to use.") do |arg|
    options[:gcloud][:keyfile] = arg
  end

  opts.on("-o OUTPUT_FILE", "--output_file OUTPUT_FILE", "The path to save a csv report.") do |arg|
    options[:output_file] = arg
  end

  opts.on("-d", "--debug", "Display extra debugging information.") do
    options[:debug] = true
  end

  opts.on("-n", "--noop", "Don't actually upload data.") do
    options[:noop] = true
  end

  opts.separator('')

  opts.on("-h", "--help", "Displays this help") do
    puts opts
    exit
  end
}
optparse.parse!

options = (YAML.load_file(options[:config]) rescue {}).merge(options)

options[:cachedir]         ||= '~/.mvp/cache'
options[:github_data]      ||= '~/.mvp/github_modules.csv'
options[:forgeapi]         ||= 'https://forgeapi.puppet.com'
options[:gcloud]           ||= {}
options[:gcloud][:dataset] ||= 'community'
options[:gcloud][:project] ||= 'puppet'
options[:gcloud][:keyfile] ||= '~/.mvp/credentials.json'

options[:cachedir]           = File.expand_path(options[:cachedir])
options[:github_data]        = File.expand_path(options[:github_data])
options[:gcloud][:keyfile]   = File.expand_path(options[:gcloud][:keyfile])
FileUtils.mkdir_p(options[:cachedir])

$logger           = Logger::new(STDOUT)
$logger.level     = options[:debug] ? Logger::DEBUG : Logger::INFO
$logger.formatter = proc { |severity,datetime,progname,msg| "#{severity}: #{msg}\n" }

runner = Mvp::Runner.new(options)

command, target = ARGV
case command
when 'get', 'retrieve', 'download'
  target ||= :all
  runner.retrieve(target.to_sym)

when 'mirror'
  target ||= :all
  runner.mirror(target.to_sym)

when 'stats'
  target ||= :all
  runner.stats(target.to_sym)

when 'test'
  runner.test

else
  puts "Unknown command: #{command}"
  puts "Run #{NAME} -h for usage."
  exit 1
end
